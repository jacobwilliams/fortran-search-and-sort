var tipuesearch = {"pages":[{"title":" sorting ","text":"sorting Status Description Basic sorting and searching routines for vectors. Supports integer & real vectors, and vectors extended from the abstract item class. Includes the routines: function unique(vec) function binary_search(val,vec) subroutine sort_ascending(vec) subroutine sort_descending(vec) Compiling The library and test program will build with any modern Fortran compiler. A Fortran Package Manager manifest file ( fmp.toml ) is included, so that the library and tests cases can be compiled with FPM. For example: fpm build --profile release\nfpm test --profile release To use fortran-search-and-sort within your FPM project, add the following to your fpm.toml file: [dependencies] fortran-search-and-sort = { git = \"https://github.com/jacobwilliams/fortran-search-and-sort.git\" } To generate the documentation using ford , run: ford sorting.md Documentation The latest API documentation can be found here . This was generated from the source code using FORD . See also stringsort -- Sorting routines for strings. Developer Info Jacob Williams","tags":"home","loc":"index.html"},{"title":"sorting_module.f90 – sorting","text":"Contents Modules sorting_module Source Code sorting_module.f90 Source Code !******************************************************************************* !> author: Jacob Williams ! !  Generic searching and sorting routines. module sorting_module use iso_fortran_env implicit none private type , abstract , public :: item !! An item to be sorted or searched. !! !! User has to define the operator and assignment functions. contains private generic , public :: operator ( > ) => greater_than generic , public :: operator ( < ) => less_than generic , public :: operator ( == ) => equal_to generic , public :: assignment ( = ) => assign_equal procedure ( greater_than_func ), deferred , public :: greater_than procedure ( less_than_func ), deferred , public :: less_than procedure ( equal_to_func ), deferred , public :: equal_to procedure ( assign_equal_func ), deferred , public :: assign_equal end type item abstract interface subroutine assign_equal_func ( v1 , v2 ) import :: item implicit none class ( item ), intent ( out ) :: v1 class ( item ), intent ( in ) :: v2 end subroutine assign_equal_func function greater_than_func ( v1 , v2 ) result ( gt ) import :: item implicit none class ( item ), intent ( in ) :: v1 class ( item ), intent ( in ) :: v2 logical :: gt end function greater_than_func function less_than_func ( v1 , v2 ) result ( lt ) import :: item implicit none class ( item ), intent ( in ) :: v1 class ( item ), intent ( in ) :: v2 logical :: lt end function less_than_func function equal_to_func ( v1 , v2 ) result ( eq ) import :: item implicit none class ( item ), intent ( in ) :: v1 class ( item ), intent ( in ) :: v2 logical :: eq end function equal_to_func end interface integer , parameter :: max_size_for_insertion_sort = 20 !! max size for using insertion sort. !! (otherwise, use quicksort) integer , parameter :: min_size_for_binary_search = 16 !! min size for using binary search !! (otherwise, use sequential search) interface expand_vector !!  Add elements to a vector in chunks. procedure :: item_expand_vector ,& int32_expand_vector , int64_expand_vector ,& real64_expand_vector , real32_expand_vector end interface expand_vector interface swap !!  Swap two values. procedure :: item_swap ,& int32_swap , int64_swap ,& real64_swap , real32_swap end interface swap interface unique !!  Returns only the unique elements of the vector. procedure :: item_unique ,& int32_unique , int64_unique ,& real64_unique , real32_unique end interface unique interface sort_ascending !!  Sorts an array in increasing order. !! !!  Uses a basic recursive quicksort !!  (with insertion sort for partitions with \\le 20 elements). !!  Replaces the original array. procedure :: item_sort_ascending ,& int32_sort_ascending , int64_sort_ascending ,& real64_sort_ascending , real32_sort_ascending end interface sort_ascending interface sort_descending !!  Sorts an array in decreasing order. !! !!  Uses a basic recursive quicksort !!  (with insertion sort for partitions with \\le 20 elements). !!  Replaces the original array. procedure :: item_sort_descending ,& int32_sort_descending , int64_sort_descending ,& real64_sort_descending , real32_sort_descending end interface sort_descending interface binary_search !! Binary search of a sorted array. !! (assumed to be in ascending order) procedure :: item_binary_search ,& int32_binary_search , int64_binary_search ,& real64_binary_search , real32_binary_search end interface binary_search public :: expand_vector public :: unique public :: sort_ascending public :: sort_descending public :: binary_search contains !******************************************************************************* include 'item_routines.inc' include 'int32_routines.inc' include 'int64_routines.inc' include 'real32_routines.inc' include 'real64_routines.inc' !******************************************************************************* end module sorting_module !*******************************************************************************","tags":"","loc":"sourcefile/sorting_module.f90.html"},{"title":"item – sorting ","text":"type, public, abstract :: item An item to be sorted or searched. User has to define the operator and assignment functions. Contents Type-Bound Procedures operator(>) operator(<) operator(==) assignment(=) greater_than less_than equal_to assign_equal Source Code item Type-Bound Procedures generic, public :: operator(>) => greater_than function greater_than_func(v1, v2) result(gt) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: v1 class( item ), intent(in) :: v2 Return Value logical generic, public :: operator(<) => less_than function less_than_func(v1, v2) result(lt) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: v1 class( item ), intent(in) :: v2 Return Value logical generic, public :: operator(==) => equal_to function equal_to_func(v1, v2) result(eq) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: v1 class( item ), intent(in) :: v2 Return Value logical generic, public :: assignment(=) => assign_equal subroutine assign_equal_func(v1, v2) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(out) :: v1 class( item ), intent(in) :: v2 procedure(greater_than_func), public, deferred :: greater_than function greater_than_func(v1, v2) result(gt) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: v1 class( item ), intent(in) :: v2 Return Value logical procedure(less_than_func), public, deferred :: less_than function less_than_func(v1, v2) result(lt) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: v1 class( item ), intent(in) :: v2 Return Value logical procedure(equal_to_func), public, deferred :: equal_to function equal_to_func(v1, v2) result(eq) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: v1 class( item ), intent(in) :: v2 Return Value logical procedure(assign_equal_func), public, deferred :: assign_equal subroutine assign_equal_func(v1, v2) Prototype Arguments Type Intent Optional Attributes Name class( item ), intent(out) :: v1 class( item ), intent(in) :: v2 Source Code type , abstract , public :: item !! An item to be sorted or searched. !! !! User has to define the operator and assignment functions. contains private generic , public :: operator ( > ) => greater_than generic , public :: operator ( < ) => less_than generic , public :: operator ( == ) => equal_to generic , public :: assignment ( = ) => assign_equal procedure ( greater_than_func ), deferred , public :: greater_than procedure ( less_than_func ), deferred , public :: less_than procedure ( equal_to_func ), deferred , public :: equal_to procedure ( assign_equal_func ), deferred , public :: assign_equal end type item","tags":"","loc":"type/item.html"},{"title":"expand_vector – sorting","text":"public interface expand_vector Add elements to a vector in chunks. Contents Module Procedures item_expand_vector int32_expand_vector int64_expand_vector real64_expand_vector real32_expand_vector Module Procedures private subroutine item_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name class( item ), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) class( item ), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine int32_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) integer(kind=int32), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine int64_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) integer(kind=int64), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine real64_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) real(kind=real64), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine real32_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) real(kind=real32), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n )","tags":"","loc":"interface/expand_vector.html"},{"title":"unique – sorting","text":"public interface unique Returns only the unique elements of the vector. Contents Module Procedures item_unique int32_unique int64_unique real64_unique real32_unique Module Procedures private subroutine item_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name class( item ), intent(in), dimension(:) :: vec a vector of items class( item ), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine int32_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in), dimension(:) :: vec a vector integer(kind=int32), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine int64_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in), dimension(:) :: vec a vector integer(kind=int64), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine real64_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in), dimension(:) :: vec a vector real(kind=real64), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine real32_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in), dimension(:) :: vec a vector real(kind=real32), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100.","tags":"","loc":"interface/unique.html"},{"title":"sort_ascending – sorting","text":"public interface sort_ascending Sorts an array in increasing order. Uses a basic recursive quicksort\n(with insertion sort for partitions with 20 elements).\nReplaces the original array. Contents Module Procedures item_sort_ascending int32_sort_ascending int64_sort_ascending real64_sort_ascending real32_sort_ascending Module Procedures private subroutine item_sort_ascending(vec) Arguments Type Intent Optional Attributes Name class( item ), intent(inout), dimension(:) :: vec private subroutine int32_sort_ascending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: vec private subroutine int64_sort_ascending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: vec private subroutine real64_sort_ascending(vec) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(inout), dimension(:) :: vec private subroutine real32_sort_ascending(vec) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(inout), dimension(:) :: vec","tags":"","loc":"interface/sort_ascending.html"},{"title":"sort_descending – sorting","text":"public interface sort_descending Sorts an array in decreasing order. Uses a basic recursive quicksort\n(with insertion sort for partitions with 20 elements).\nReplaces the original array. Contents Module Procedures item_sort_descending int32_sort_descending int64_sort_descending real64_sort_descending real32_sort_descending Module Procedures private subroutine item_sort_descending(vec) Arguments Type Intent Optional Attributes Name class( item ), intent(inout), dimension(:) :: vec private subroutine int32_sort_descending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: vec private subroutine int64_sort_descending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: vec private subroutine real64_sort_descending(vec) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(inout), dimension(:) :: vec private subroutine real32_sort_descending(vec) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(inout), dimension(:) :: vec","tags":"","loc":"interface/sort_descending.html"},{"title":"binary_search – sorting","text":"public interface binary_search Binary search of a sorted array.\n(assumed to be in ascending order) Contents Module Procedures item_binary_search int32_binary_search int64_binary_search real64_binary_search real32_binary_search Module Procedures private function item_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: val value to match in vec class( item ), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function int32_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: val value to match in vec integer(kind=int32), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function int64_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: val value to match in vec integer(kind=int64), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function real64_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: val value to match in vec real(kind=real64), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function real32_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: val value to match in vec real(kind=real32), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned)","tags":"","loc":"interface/binary_search.html"},{"title":"sorting_module – sorting","text":"Generic searching and sorting routines. Uses iso_fortran_env Contents Interfaces expand_vector unique sort_ascending sort_descending binary_search Derived Types item Interfaces public interface expand_vector Add elements to a vector in chunks. private subroutine item_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name class( item ), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) class( item ), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine int32_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) integer(kind=int32), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine int64_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) integer(kind=int64), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine real64_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) real(kind=real64), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) private subroutine real32_expand_vector(vec, n, chunk_size, val, finished) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(inout), dimension(:), allocatable :: vec integer, intent(inout) :: n counter for last element added to vec .\nmust be initialized to size(vec) (or 0 if not allocated) before first call integer, intent(in) :: chunk_size allocate vec in blocks of this size (>0) real(kind=real32), intent(in), optional :: val the value to add to vec logical, intent(in), optional :: finished set to true to return vec as its correct size ( n ) public interface unique Returns only the unique elements of the vector. private subroutine item_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name class( item ), intent(in), dimension(:) :: vec a vector of items class( item ), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine int32_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in), dimension(:) :: vec a vector integer(kind=int32), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine int64_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in), dimension(:) :: vec a vector integer(kind=int64), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine real64_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in), dimension(:) :: vec a vector real(kind=real64), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. private subroutine real32_unique(vec, vec_unique, chunk_size) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in), dimension(:) :: vec a vector real(kind=real32), intent(out), dimension(:), allocatable :: vec_unique unique elements of vec integer, intent(in), optional :: chunk_size chunk size for expanding arrays.\nif not present, default is 100. public interface sort_ascending Sorts an array in increasing order. Read more… private subroutine item_sort_ascending(vec) Arguments Type Intent Optional Attributes Name class( item ), intent(inout), dimension(:) :: vec private subroutine int32_sort_ascending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: vec private subroutine int64_sort_ascending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: vec private subroutine real64_sort_ascending(vec) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(inout), dimension(:) :: vec private subroutine real32_sort_ascending(vec) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(inout), dimension(:) :: vec public interface sort_descending Sorts an array in decreasing order. Read more… private subroutine item_sort_descending(vec) Arguments Type Intent Optional Attributes Name class( item ), intent(inout), dimension(:) :: vec private subroutine int32_sort_descending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: vec private subroutine int64_sort_descending(vec) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: vec private subroutine real64_sort_descending(vec) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(inout), dimension(:) :: vec private subroutine real32_sort_descending(vec) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(inout), dimension(:) :: vec public interface binary_search Binary search of a sorted array.\n(assumed to be in ascending order) private function item_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name class( item ), intent(in) :: val value to match in vec class( item ), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function int32_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: val value to match in vec integer(kind=int32), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function int64_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: val value to match in vec integer(kind=int64), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function real64_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: val value to match in vec real(kind=real64), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) private function real32_binary_search(val, vec) result(jloc) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: val value to match in vec real(kind=real32), intent(in), dimension(:) :: vec array to search (it is assumed to be sorted) Return Value integer the first matched index in vec (if not found, 0 is returned) Derived Types type, public, abstract :: item An item to be sorted or searched. Read more… Type-Bound Procedures generic, public :: operator(>) => greater_than generic, public :: operator(<) => less_than generic, public :: operator(==) => equal_to generic, public :: assignment(=) => assign_equal procedure(greater_than_func), public :: greater_than procedure(less_than_func), public :: less_than procedure(equal_to_func), public :: equal_to procedure(assign_equal_func), public :: assign_equal","tags":"","loc":"module/sorting_module.html"}]}